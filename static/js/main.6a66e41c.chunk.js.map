{"version":3,"sources":["components/Editor.jsx","components/Output.jsx","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","isDarkMode","data","setData","Col","placeholder","mode","theme","name","width","height","onChange","className","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","showLineNumbers","tabSize","Output","showData","title","srcDoc","App","useState","setisDarkMode","setShowData","Container","Row","Button","onClick","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gVAUe,SAASA,EAAOC,GAC7B,IAAQC,EAA8BD,EAA9BC,WAAYC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,QAC1B,OACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CACEC,YAAY,2BACZC,KAAK,OACLC,MAAON,EAAa,UAAY,SAChCO,KAAK,gBACLC,MAAM,OACNC,OAAO,OACPC,SAAUR,EACVS,UAAU,aACVC,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,MAAOf,EACPgB,WAAY,CACVC,iBAAiB,EACjBC,QAAS,OC1BJ,SAASC,EAAOrB,GAC7B,IAAQsB,EAAatB,EAAbsB,SACR,OACE,cAAClB,EAAA,EAAD,UACE,wBACEmB,MAAM,SACNC,OAAQF,EACRb,MAAM,OACNC,OAAO,WC6CAe,MA/Cf,WACE,MAAoCC,oBAAS,GAA7C,mBAAOzB,EAAP,KAAmB0B,EAAnB,KACA,EAAwBD,mBAAS,IAAjC,mBAAOxB,EAAP,KAAaC,EAAb,KACA,EAAgCuB,mBAAS,iBAAzC,mBAAOJ,EAAP,KAAiBM,EAAjB,KAWA,OACE,qBAAKhB,UAAS,UAAKX,EAAa,YAAc,IAA9C,SACE,eAAC4B,EAAA,EAAD,CAAWjB,UAAS,eAAUX,EAAa,YAAc,IAAzD,UACE,cAAC6B,EAAA,EAAD,CAAKlB,UAAU,cAAf,SACE,eAACR,EAAA,EAAD,WACE,cAAC2B,EAAA,EAAD,CAAQnB,UAAU,MAAMoB,QAfV,WACtB,IAAMC,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACnC,GAAO,CAC5BoC,KAAM,eAERL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAW,eACnBR,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,SAOkDC,QAAQ,UAA1D,2BAGA,cAACf,EAAA,EAAD,CACEnB,UAAU,MACVoB,QAAS,kBAAML,GAAe1B,IAC9B6C,QAAQ,UAHV,mBAKM7C,EAAa,QAAU,OAL7B,WAOA,cAAC8B,EAAA,EAAD,CACEnB,UAAU,MACVoB,QAAS,kBAAMJ,EAAY1B,IAC3B4C,QAAQ,UAHV,sBASJ,eAAChB,EAAA,EAAD,CAAKlB,UAAU,WAAf,UACE,cAAC,EAAD,CAAQX,WAAYA,EAAYC,KAAMA,EAAMC,QAASA,IACrD,cAACkB,EAAD,CAAQC,SAAUA,aCtCbyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BZ,M","file":"static/js/main.6a66e41c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Col from 'react-bootstrap/Col';\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-html';\r\nimport 'ace-builds/src-noconflict/theme-github';\r\nimport 'ace-builds/src-noconflict/theme-monokai';\r\n\r\nimport './Editor.css';\r\n\r\nexport default function Editor(props) {\r\n  const { isDarkMode, data, setData } = props;\r\n  return (\r\n    <Col>\r\n      <AceEditor\r\n        placeholder='Enter HTML, CSS, JS code'\r\n        mode='html'\r\n        theme={isDarkMode ? 'monokai' : 'github'}\r\n        name='manish-editor'\r\n        width='100%'\r\n        height='100%'\r\n        onChange={setData}\r\n        className='ace-editor'\r\n        fontSize={14}\r\n        showPrintMargin={true}\r\n        showGutter={true}\r\n        highlightActiveLine={true}\r\n        value={data}\r\n        setOptions={{\r\n          showLineNumbers: true,\r\n          tabSize: 2,\r\n        }}\r\n      />\r\n    </Col>\r\n  );\r\n}\r\n\r\nEditor.propTypes = {\r\n  data: PropTypes.string,\r\n  setData: PropTypes.func,\r\n  isDarkMode: PropTypes.bool,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default function Output(props) {\r\n  const { showData } = props;\r\n  return (\r\n    <Col>\r\n      <iframe\r\n        title='output'\r\n        srcDoc={showData}\r\n        width='100%'\r\n        height='100%'\r\n      ></iframe>\r\n    </Col>\r\n  );\r\n}\r\n\r\nOutput.propTypes = {\r\n  showData: PropTypes.string,\r\n};\r\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport './App.css';\nimport Editor from './components/Editor';\nimport Output from './components/Output';\n\nfunction App() {\n  const [isDarkMode, setisDarkMode] = useState(false);\n  const [data, setData] = useState('');\n  const [showData, setShowData] = useState('<html></html>');\n  const downloadTxtFile = () => {\n    const element = document.createElement('a');\n    const file = new Blob([data], {\n      type: 'text/plain',\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = 'download.txt';\n    document.body.appendChild(element);\n    element.click();\n  };\n  return (\n    <div className={`${isDarkMode ? 'dark-mode' : ''}`}>\n      <Container className={`body ${isDarkMode ? 'dark-mode' : ''}`}>\n        <Row className='actions_bar'>\n          <Col>\n            <Button className='m-1' onClick={downloadTxtFile} variant='success'>\n              Save the Code\n            </Button>\n            <Button\n              className='m-1'\n              onClick={() => setisDarkMode(!isDarkMode)}\n              variant='success'\n            >\n              {`${isDarkMode ? 'Light' : 'Dark'} mode`}\n            </Button>\n            <Button\n              className='m-1'\n              onClick={() => setShowData(data)}\n              variant='success'\n            >\n              Run\n            </Button>\n          </Col>\n        </Row>\n        <Row className='main_row'>\n          <Editor isDarkMode={isDarkMode} data={data} setData={setData} />\n          <Output showData={showData} />\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}